{
  "openapi": "3.0.1",
  "info": {
    "title": "Primal",
    "description": "Primal - MVP",
    "version": "v0.1"
  },
  "paths": {
    "/api/Character": {
      "get": {
        "tags": [
          "Character"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Character"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CharacterDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CharacterDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CharacterDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Character"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CharacterUpdateDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CharacterUpdateDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CharacterUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Character"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Character/{id}": {
      "get": {
        "tags": [
          "Character"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Equipment": {
      "get": {
        "tags": [
          "Equipment"
        ],
        "summary": "Retorna uma lista com todos os Equipamentos cadastrados.",
        "responses": {
          "200": {
            "description": "Retorna uma lista com todos os equipamentos cadastrados."
          }
        }
      },
      "post": {
        "tags": [
          "Equipment"
        ],
        "summary": "Registra um equipamento no Sistema.",
        "requestBody": {
          "description": "Informações do do equipamento que serão cadastradas.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EquipmentDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EquipmentDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EquipmentDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Registra um novo equipamento no sistema."
          },
          "400": {
            "description": "Retorna que os dados de cadastro estão incompletos."
          }
        }
      },
      "put": {
        "tags": [
          "Equipment"
        ],
        "summary": "Edita as informações de um usuário.",
        "requestBody": {
          "description": "Informações do usuário que podem ser editadas.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EquipmentUpdateDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EquipmentUpdateDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EquipmentUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retorna o usuário editado."
          },
          "400": {
            "description": "Retorna que há valores inválidos na requisição."
          },
          "404": {
            "description": "Retorna que o usuário não foi encontrado."
          }
        }
      },
      "delete": {
        "tags": [
          "Equipment"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Equipment/{id}": {
      "get": {
        "tags": [
          "Equipment"
        ],
        "summary": "Retorna um usuário específico com base no Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "O identificador único do usuário.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retorna o usuário."
          },
          "404": {
            "description": "Retorna usúario não encontrado."
          }
        }
      }
    },
    "/api/User/find-all": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retorna uma lista com todos os usuários cadastrados.",
        "responses": {
          "200": {
            "description": "Retorna uma lista com todos os usuários cadastrados."
          }
        }
      }
    },
    "/api/User/find-Id/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retorna um usuário específico com base no Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "O identificador único do usuário.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retorna o usuário."
          },
          "404": {
            "description": "Retorna usúario não encontrado."
          }
        }
      }
    },
    "/api/User/create": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Registra um usuário no Sistema.",
        "requestBody": {
          "description": "Informações do usuário que serão cadastradas.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Registra um novo usuário no sistema."
          },
          "400": {
            "description": "Retorna que os dados de cadastro estão inconpletos."
          }
        }
      }
    },
    "/api/User/update": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Edita as informações de um usuário.",
        "requestBody": {
          "description": "Informações do usuário que podem ser editadas.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retorna o usuário editado."
          },
          "400": {
            "description": "Retorna que há valores inválidos na requisição."
          },
          "404": {
            "description": "Retorna que o usuário não foi encontrado."
          }
        }
      }
    },
    "/api/User/Login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Loga o usuário no sistema.",
        "requestBody": {
          "description": "Email e senha do usuário.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retorna que o login foi realizado com sucesso."
          },
          "400": {
            "description": "Retorna que os campos de login devem ser preenchidos."
          },
          "401": {
            "description": "Retorna que as credenciais não tem acesso ao sistema."
          },
          "404": {
            "description": "Retorna que o usuário não existe no sistema."
          },
          "500": {
            "description": "Retorna erro interno ao gerar o token de acesso."
          }
        }
      }
    },
    "/api/User/delete/{id}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deleta um usuário com base no Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "O identificador único do usuário.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retorna que o usuário foi deletado com sucesso."
          },
          "400": {
            "description": "Retorna que Id deve ser um numero positivo."
          },
          "404": {
            "description": "Retorna que o usuário não foi encontrado."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Character": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "race": {
            "$ref": "#/components/schemas/RaceEnum"
          },
          "strength": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "image": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "agility": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "luck": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dexterity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hp": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "mp": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "equipment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Equipment"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CharacterDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "race": {
            "$ref": "#/components/schemas/RaceEnum"
          },
          "strength": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "agility": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "image": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "luck": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dexterity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hp": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "mp": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "userID": {
            "type": "integer",
            "format": "int32"
          },
          "equipment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Equipment"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CharacterUpdateDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "race": {
            "$ref": "#/components/schemas/RaceEnum"
          },
          "strength": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "agility": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "luck": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dexterity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hp": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "mp": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Equipment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "class": {
            "$ref": "#/components/schemas/EquipmentClassEnum"
          },
          "damage": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "resistance": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "effect": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "characterId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "EquipmentClassEnum": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "EquipmentDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "class": {
            "$ref": "#/components/schemas/EquipmentClassEnum"
          },
          "damage": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "resistance": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "effect": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "characterID": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "EquipmentUpdateDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "class": {
            "$ref": "#/components/schemas/EquipmentClassEnum"
          },
          "damage": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "resistance": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "effect": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GenderEnum": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "LoginDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MaritalStatusEnum": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "RaceEnum": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "RoleEnum": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "UserDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "document": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "occupation": {
            "type": "string",
            "nullable": true
          },
          "age": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maritalStatus": {
            "$ref": "#/components/schemas/MaritalStatusEnum"
          },
          "gender": {
            "$ref": "#/components/schemas/GenderEnum"
          },
          "role": {
            "$ref": "#/components/schemas/RoleEnum"
          },
          "character": {
            "$ref": "#/components/schemas/Character"
          }
        },
        "additionalProperties": false
      },
      "UserUpdateDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "document": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "occupation": {
            "type": "string",
            "nullable": true
          },
          "age": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Authentication with JWT. Ex: Bearer {token}",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}